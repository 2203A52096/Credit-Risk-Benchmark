# -*- coding: utf-8 -*-
"""cred_risk_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19T6p5x-CfSh0-TgrHS0pH4eoczEBMO8z
"""

import streamlit as st
import pickle
import numpy as np

model = pickle.load(open('model.pkl', 'rb'))

# Custom CSS for beautification
st.markdown("""
    <style>
        body {
            background-color: #f4f4f9;
            font-family: 'Arial', sans-serif;
        }
        .title {
            color: #4a4a4a;
            text-align: center;
            font-size: 36px;
            margin-top: 30px;
        }
        .subheader {
            font-size: 24px;
            color: #3a3a3a;
        }
        .content {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }
        .predict-button {
            background-color: #4CAF50;
            color: white;
            border-radius: 10px;
            font-size: 18px;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
        }
        .predict-button:hover {
            background-color: #45a049;
        }
        .jokes-container {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
        }
        .stButton>button {
            font-size: 16px;
        }
        .stTextInput>div>input {
            font-size: 16px;
        }
    </style>
""", unsafe_allow_html=True)

# Home Page
def home_page():
    st.title("Credit Risk Benchmark Project")
    st.markdown("<div class='content'><h3 class='subheader'>Overview of Credit Risk Prediction</h3></div>", unsafe_allow_html=True)
    st.write("""
    **Credit Risk Benchmark** is a project aimed at predicting the likelihood of serious delinquency occurring
    within the next 2 years. The goal is to help financial institutions assess and mitigate risk while improving
    their lending decision process.

    ## Project Workflow:
    1. **Data Loading and Exploration**: Load and inspect the data.
    2. **Data Preprocessing**: Clean data, remove outliers, handle missing values.
    3. **SMOTE**: Address class imbalance using Synthetic Minority Over-sampling Technique (SMOTE).
    4. **Model Training**: Train classifiers such as Random Forest, XGBoost, and LightGBM.
    5. **Prediction**: Make predictions on new data.
    6. **Evaluation**: Evaluate models using accuracy, precision, recall, and F1-score.
    """)

# Prediction Page
def prediction_page():
    st.title("Credit Risk Prediction")

    st.markdown("<div class='content'><h3 class='subheader'>Enter Borrower Information</h3></div>", unsafe_allow_html=True)

    # Input fields for feature values (based on the dataset statistics provided)
    columns = st.columns(2)

    revolving_utilization = columns[0].number_input("Revolving Utilization of Unsecured Lines", 0.0, 22000.0, 0.5)
    debt_ratio = columns[1].number_input("Debt Ratio", 0.0, 61106.5, 0.3)
    monthly_income = columns[0].number_input("Monthly Income", 0, 250000, 5000)
    age = columns[1].number_input("Age", 21, 101, 48)
    late_30_59 = columns[0].number_input("Number of Time 30-59 Days Past Due Not Worse", 0, 98, 0)
    open_credit = columns[1].number_input("Number of Open Credit Lines and Loans", 0, 57, 5)
    late_90 = columns[0].number_input("Number of Times 90 Days Late", 0, 98, 0)
    late_60_89 = columns[1].number_input("Number of Time 60-89 Days Past Due Not Worse", 0, 98, 0)
    dependents = columns[0].number_input("Number of Dependents", 0, 8, 0)
    real_estate = columns[1].number_input("Number of Real Estate Loans or Lines", 0, 29, 1)

    # Prepare the features array (using the order you defined earlier)
    features = np.array([revolving_utilization, debt_ratio, monthly_income, age, late_30_59,
                         open_credit, late_90, late_60_89, dependents, real_estate])

    # Make a prediction using the loaded model
    if st.button("Predict", key="predict-button"):
        prediction = model.predict([features])  # Use the loaded model for prediction
        if prediction[0] == 0:
            st.success("The borrower is predicted to **not default**.")
        else:
            st.error("The borrower is predicted to **default**.")

# Joke Page
def joke_page():
    st.title("Jokes to Refresh Your Mind")

    st.markdown("<div class='content'><h3 class='subheader'>Money and Loan Jokes</h3></div>", unsafe_allow_html=True)

    jokes = [
        "Why don’t loans ever get lonely? Because they always have interest!",
        "I tried to start a bank for cats... but they kept making too many purr-sonal loans.",
        "Why was the loan officer always so calm? Because he knew the risks of borrowing stress.",
        "I applied for a loan at the bank, but they rejected me... they said I was too ‘risky’!",
        "Money can’t buy happiness... but it can buy a yacht, which is pretty close.",
        "What do you call someone who’s always lending you money? A loan shark!",
        "Why do loans make terrible comedians? They always keep their jokes on the back burner!",
        "I asked my friend if I could borrow some money for a week. He said, ‘Sure, I’ll make it interest-free... unlike my bank!'",
        "Why did the credit card go to therapy? Because it had too many issues with its balance!",
        "Bank tellers are good at math because they know how to make cents of things!"
    ]

    # Display a random joke
    st.write(f"<div class='jokes-container'>{np.random.choice(jokes)}</div>", unsafe_allow_html=True)

# Streamlit app layout
def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Go to", ["Home", "Prediction", "Jokes"])

    if page == "Home":
        home_page()
    elif page == "Prediction":
        prediction_page()
    else:
        joke_page()

# Run the Streamlit app
if __name__ == "__main__":
    main()